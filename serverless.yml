service: bluesky-feeds

provider:
  name: aws
  region: us-west-2
  runtime: nodejs18.x
  stage: ${opt:stage, 'development'}
  timeout: 28
  memorySize: 1024
  deploymentBucket:
    name: ${ssm:deployment-artifacts-bucket}
  environment:
    PUBLIC_HOSTNAME: ${self:custom.customDomain.domainName}
    SYNC_SUBSCRIBER_QUEUE_TABLE: ${self:custom.syncSubscriberQueueTable}
    SUBSCRIBER_FOLLOWING_TABLE: ${self:custom.subscriberFollowingTable}
    MUTE_WORDS_TABLE: ${self:custom.muteWordsTable}
    APP_STATUS_TABLE: ${self:custom.appStatusTable}
    POSTS_TABLE: ${self:custom.postsTable}
    FEED_TABLE: ${self:custom.feedTable}
    BLUESKY_SERVICE_IDENTIFIER: ${self:custom.blueskyAuth.identifier}
    BLUESKY_SERVICE_USER_DID: ${ssm:/bluesky-feeds/${self:provider.stage}/service/user-did}


custom:
  logRetentionInDays: 90
  prune:
    automatic: true
    number: 3
  serverless-iam-roles-per-function:
    defaultInherit: true
  customDomain:
    domainName: ${ssm:/bluesky-feeds/${self:provider.stage}/domain-name}
    certificateArn: ${ssm:/bluesky-feeds/${self:provider.stage}/certificate-arn}
    endpointType: REGIONAL
    securityPolicy: tls_1_2
    apiType: http
  syncSubscriberQueueTable: ${self:service}-${self:provider.stage}-sync-subscriber-queue
  subscriberFollowingTable: ${self:service}-${self:provider.stage}-subscriber-following
  muteWordsTable: ${self:service}-${self:provider.stage}-mute-words
  appStatusTable: ${self:service}-${self:provider.stage}-app-status
  postsTable: ${self:service}-${self:provider.stage}-posts
  feedTable: ${self:service}-${self:provider.stage}-feed-v2
  externalResolveQueue: ${self:service}-${self:provider.stage}-external-resolve.fifo
  blueskyAuth:
    identifier: ${ssm:/bluesky-feeds/${self:provider.stage}/service/identifier}
    password: ${ssm:/bluesky-feeds/${self:provider.stage}/service/password}
  followingFeedUrl: ${ssm:/bluesky-feeds/${self:provider.stage}/following-feed-url}
  enablePolling:
    development: false
    production: true

	
plugins:
  - serverless-plugin-typescript
  - serverless-domain-manager
  - serverless-iam-roles-per-function
  - serverless-prune-plugin
  - serverless-plugin-log-retention

functions:
  did:
    handler: ./src/endpoints/did/index.handler
    events:
     - httpApi: GET /.well-known/did.json

  getFeedSkeleton:
    handler: ./src/endpoints/getFeedSkeleton/index.handler
    events:
     - httpApi: GET /xrpc/app.bsky.feed.getFeedSkeleton
    environment:
      FOLLOWING_FEED_URL: ${self:custom.followingFeedUrl}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem
        Resource:
          - !GetAtt SubscriberFollowingTable.Arn
      - Effect: "Allow"
        Action:
          - dynamodb:BatchGetItem
        Resource:
          - !GetAtt PostsTable.Arn
      - Effect: "Allow"
        Action:
          - dynamodb:Query
        Resource:
          - !GetAtt MuteWordsTable.Arn
          - !GetAtt FeedTableV2.Arn
          - !Sub "${FeedTableV2.Arn}/*"
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
        Resource:
          - !GetAtt SyncSubscriberQueueTable.Arn

  readFirehose:
    handler: ./src/endpoints/readFirehose/index.handler
    timeout: 240
    memorySize: 1024
    events:
      - schedule:
          rate: rate(5 minutes)
          enabled: ${self:custom.enablePolling.${self:provider.stage}}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
        Resource:
          - !GetAtt AppStatusTable.Arn
        Condition:
          ForAllValues:StringEquals:
            dynamodb:LeadingKeys:
              - firehose-cursor
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem
          - dynamodb:BatchGetItem
        Resource:
          - !GetAtt SubscriberFollowingTable.Arn
      - Effect: "Allow"
        Action:
          - dynamodb:BatchWriteItem
        Resource:
          - !GetAtt PostsTable.Arn

  readFirehose-distPosts:
    handler: ./src/endpoints/readFirehose/distributePosts.handler
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [PostsTable, StreamArn]
          startingPosition: LATEST
          batchSize: 1
          maximumRetryAttempts: 5
          filterPatterns:
            - eventName: [INSERT, REMOVE]
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:Query
        Resource:
          - !GetAtt SubscriberFollowingTable.Arn
      - Effect: "Allow"
        Action:
          - dynamodb:BatchWriteItem
        Resource:
          - !GetAtt FeedTableV2.Arn
      - Effect: "Allow"
        Action:
          - dynamodb:Query
        Resource:
          - !GetAtt FeedTableV2.Arn
          - !Sub "${FeedTableV2.Arn}/*"
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:DeleteItem
        Resource:
          - !GetAtt MuteWordsTable.Arn
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
        Resource:
          - !GetAtt SyncSubscriberQueueTable.Arn

  readFirehose-rslvPosts:
    handler: ./src/endpoints/readFirehose/resolvePosts.handler
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [PostsTable, StreamArn]
          startingPosition: LATEST
          batchSize: 1
          maximumRetryAttempts: 5
          filterPatterns:
            - eventName: [INSERT]
              dynamodb:
                NewImage:
                  resolvedStatus:
                    S: [UNRESOLVED]
      - sqs:
          arn:
            Fn::GetAtt: [ExternalResolveQueue, Arn]
          batchSize: 1
    environment:
      EXTERNAL_RESOLVE_QUEUE_URL: !Ref ExternalResolveQueue
      BLUESKY_SERVICE_PASSWORD: ${self:custom.blueskyAuth.password}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:BatchGetItem
          - dynamodb:BatchWriteItem
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:Query
        Resource:
          - !GetAtt PostsTable.Arn
          - !Sub "${PostsTable.Arn}/*"
      - Effect: "Allow"
        Action:
          - sqs:SendMessage
        Resource:
          - !GetAtt ExternalResolveQueue.Arn

  syncSubscriberFollowing:
    handler: ./src/endpoints/syncSubscriberFollowing/index.handler
    events:	
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [SyncSubscriberQueueTable, StreamArn]
          startingPosition: LATEST
          batchSize: 1
          maximumRetryAttempts: 5
          filterPatterns:
            - eventName: [INSERT, MODIFY]
    environment:
      BLUESKY_SERVICE_PASSWORD: ${self:custom.blueskyAuth.password}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
        Resource:
          - !GetAtt SubscriberFollowingTable.Arn

  syncSubscriberFollowing-onFolUnfol:
    handler: ./src/endpoints/syncSubscriberFollowing/onFollowUnfollow.handler
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [SubscriberFollowingTable, StreamArn]
          startingPosition: LATEST
          batchSize: 1
          maximumRetryAttempts: 5
          filterPatterns:
            - eventName: [INSERT]
              dynamodb:
                NewImage:
                  subscriberDid:
                    S: [aggregate]
            - eventName: [MODIFY]
              dynamodb:
                NewImage:
                  subscriberDid:
                    S: [aggregate]
                  followedBy:
                    N: ["0"]
            - eventName: [INSERT, REMOVE]
              dynamodb:
                Keys:
                  subscriberDid:
                    S: [ { "anything-but": aggregate } ]
                  qualifier:
                    S: [ { "anything-but": subscriber } ]
    iamRoleStatementsName: ${self:service}-${self:provider.stage}-syncSubscriber-onFoUnfo-${self:provider.region}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:UpdateItem
        Resource:
          - !GetAtt SubscriberFollowingTable.Arn
      - Effect: "Allow"
        Action:
          - dynamodb:BatchWriteItem
        Resource:
          - !GetAtt FeedTableV2.Arn
      - Effect: "Allow"
        Action:
          - dynamodb:Query
        Resource:
          - !GetAtt FeedTableV2.Arn
          - !Sub "${FeedTableV2.Arn}/*"
          - !GetAtt PostsTable.Arn
          - !Sub "${PostsTable.Arn}/*"

  syncSubscriberFollowing-cleanUp:
    handler: ./src/endpoints/syncSubscriberFollowing/cleanUpOldSubscribers.handler
    timeout: 900
    events:
      - schedule:
          rate: rate(7 days)
          enabled: ${self:custom.enablePolling.${self:provider.stage}}
    iamRoleStatementsName: ${self:service}-${self:provider.stage}-syncSubscriber-cleanUp-${self:provider.region}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:UpdateItem
          - dynamodb:Scan
        Resource:
          - !GetAtt SyncSubscriberQueueTable.Arn

resources:
  Resources:
    SyncSubscriberQueueTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.syncSubscriberQueueTable}
        AttributeDefinitions:
          - AttributeName: subscriberDid
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: subscriberDid
            KeyType: HASH
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        TimeToLiveSpecification:
          AttributeName: expiresAt
          Enabled: True

    SubscriberFollowingTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.subscriberFollowingTable}
        AttributeDefinitions:
          - AttributeName: subscriberDid
            AttributeType: S
          - AttributeName: qualifier
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: subscriberDid
            KeyType: HASH
          - AttributeName: qualifier
            KeyType: RANGE
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        TimeToLiveSpecification:
          AttributeName: expiresAt
          Enabled: True

    PostsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.postsTable}
        AttributeDefinitions:
          - AttributeName: uri
            AttributeType: S
          - AttributeName: resolvedStatus
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: author
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: uri
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ByResolvedStatusAndCreatedAt
            KeySchema:
              - AttributeName: resolvedStatus
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ByAuthorV2
            KeySchema:
              - AttributeName: author
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: INCLUDE
              NonKeyAttributes:
                - expiresAt
                - type
                - repostedPostUri
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        TimeToLiveSpecification:
          AttributeName: expiresAt
          Enabled: True

    FeedTableV2:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.feedTable}
        AttributeDefinitions:
          - AttributeName: subscriberDid
            AttributeType: S
          - AttributeName: uri
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: author
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: subscriberDid
            KeyType: HASH
          - AttributeName: uri
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: ByCreatedAt
            KeySchema:
              - AttributeName: subscriberDid
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: INCLUDE
              NonKeyAttributes:
                - repostedPostUri
                - type
        GlobalSecondaryIndexes:
          - IndexName: ByPostUri
            KeySchema:
              - AttributeName: uri
                KeyType: HASH
              - AttributeName: subscriberDid
                KeyType: RANGE
            Projection:
              ProjectionType: KEYS_ONLY
          - IndexName: ByAuthor
            KeySchema:
              - AttributeName: subscriberDid
                KeyType: HASH
              - AttributeName: author
                KeyType: RANGE
            Projection:
              ProjectionType: KEYS_ONLY
        TimeToLiveSpecification:
          AttributeName: expiresAt
          Enabled: True

    MuteWordsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.muteWordsTable}
        AttributeDefinitions:
          - AttributeName: subscriberDid
            AttributeType: S
          - AttributeName: muteWord
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: subscriberDid
            KeyType: HASH
          - AttributeName: muteWord
            KeyType: RANGE

    AppStatusTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.appStatusTable}
        AttributeDefinitions:
          - AttributeName: setting
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: setting
            KeyType: HASH

    ExternalResolveQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.externalResolveQueue}
        FifoQueue: True