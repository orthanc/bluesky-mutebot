service: bluesky-feeds

provider:
  name: aws
  region: us-west-2
  runtime: nodejs18.x
  stage: ${opt:stage, 'development'}
  timeout: 28
  memorySize: 1024
  deploymentBucket:
    name: ${ssm:deployment-artifacts-bucket}
  environment:
    PUBLIC_HOSTNAME: ${self:custom.customDomain.domainName}
    SUBSCRIBER_FOLLOWING_TABLE: ${self:custom.subscriberFollowingTable}
    BLUESKY_SERVICE_USER_DID: ${ssm:/bluesky-feeds/${self:provider.stage}/service/user-did}
    BLUESKY_FOLLOWING_LIST: ${ssm:/bluesky-feeds/${self:provider.stage}/following-list}


custom:
  prune:
    automatic: true
    number: 3
  serverless-iam-roles-per-function:
    defaultInherit: true
  customDomain:
    domainName: ${ssm:/bluesky-feeds/${self:provider.stage}/domain-name}
    certificateArn: ${ssm:/bluesky-feeds/${self:provider.stage}/certificate-arn}
    endpointType: REGIONAL
    securityPolicy: tls_1_2
    apiType: http
  syncSubscriberQueueTable: ${self:service}-${self:provider.stage}-sync-subscriber-queue
  subscriberFollowingTable: ${self:service}-${self:provider.stage}-subscriber-following
  updateListQueue: ${self:service}-${self:provider.stage}-update-list
  updateListQueueDLQ: ${self:service}-${self:provider.stage}-update-list-dlq
  blueskyAuth:
    identifier: ${ssm:/bluesky-feeds/${self:provider.stage}/service/identifier}
    password: ${ssm:/bluesky-feeds/${self:provider.stage}/service/password}

	
plugins:
  - serverless-plugin-typescript
  - serverless-domain-manager
  - serverless-iam-roles-per-function
  - serverless-prune-plugin

functions:
  did:
    handler: ./src/endpoints/did/index.handler
    events:
     - httpApi: GET /.well-known/did.json

  getFeedSkeleton:
    handler: ./src/endpoints/getFeedSkeleton/index.handler
    events:
     - httpApi: GET /xrpc/app.bsky.feed.getFeedSkeleton

  syncSubscriberFollowing:
    handler: ./src/endpoints/syncSubscriberFollowing/index.handler
    events:	
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [SyncSubscriberQueueTable, StreamArn]
          batchSize: 1
          maximumRetryAttempts: 5
          filterPatterns:
            - eventName: [INSERT, MODIFY]
    environment:
      BLUESKY_SERVICE_IDENTIFIER: ${self:custom.blueskyAuth.identifier}
      BLUESKY_SERVICE_PASSWORD: ${self:custom.blueskyAuth.password}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource:
          - !GetAtt SyncSubscriberQueueTable.Arn
          - !GetAtt SubscriberFollowingTable.Arn

  syncSubscriberFollowing-trigUpdList:
    handler: ./src/endpoints/syncSubscriberFollowing/triggerUpdateList.handler
    events:	
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [SubscriberFollowingTable, StreamArn]
          batchSize: 1
          maximumRetryAttempts: 5
          filterPatterns:
            - eventName: [INSERT]
              dynamodb: 
                NewImage:
                  subscriberDid:
                    S: [aggregate]
            - eventName: [MODIFY]
              dynamodb: 
                NewImage:
                  subscriberDid:
                    S: [aggregate]
                  followedBy:
                    N: ["0"]
    environment:
      UPDATE_LIST_QUEUE_URL: !Ref UpdateListQueue
    iamRoleStatementsName: ${self:service}-${self:provider.stage}-syncSubscriber-triglist-${self:provider.region}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:DeleteItem
        Resource:
          - !GetAtt SubscriberFollowingTable.Arn
      - Effect: "Allow"
        Action:
          - sqs:SendMessage
        Resource:
          - !GetAtt UpdateListQueue.Arn

  syncSubscriberFollowing-updateList:
    handler: ./src/endpoints/syncSubscriberFollowing/updateList.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt: [UpdateListQueue, Arn]
          batchSize: 1
    environment:
      BLUESKY_SERVICE_IDENTIFIER: ${self:custom.blueskyAuth.identifier}
      BLUESKY_SERVICE_PASSWORD: ${self:custom.blueskyAuth.password}
    iamRoleStatementsName: ${self:service}-${self:provider.stage}-syncSubscriberFoll-list-${self:provider.region}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource:
          - !GetAtt SubscriberFollowingTable.Arn

resources:
  Resources:
    SyncSubscriberQueueTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.syncSubscriberQueueTable}
        AttributeDefinitions:
          - AttributeName: subscriberDid
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: subscriberDid
            KeyType: HASH
        StreamSpecification:
          StreamViewType: NEW_IMAGE

    SubscriberFollowingTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.subscriberFollowingTable}
        AttributeDefinitions:
          - AttributeName: subscriberDid
            AttributeType: S
          - AttributeName: qualifier
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: subscriberDid
            KeyType: HASH
          - AttributeName: qualifier
            KeyType: RANGE
        StreamSpecification:
          StreamViewType: NEW_IMAGE

    UpdateListQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.updateListQueue}
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt UpdateListQueueDLQ.Arn
          maxReceiveCount: 5
    
    UpdateListQueueDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.updateListQueueDLQ}
        RedriveAllowPolicy:
          redrivePermission: allowAll